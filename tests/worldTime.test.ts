// Generated by CodiumAI
import { WorldTime } from "../src/worldtime-api/src/worldtime.ts";
describe('WorldTime', () => {

  // Returns an object with all expected properties when a valid timeZoneName is provided.
  it('should return an object with all expected properties when a valid timeZoneName is provided', () => {
    const timeZoneInfo = WorldTime("Pacific/Niue");
    expect(timeZoneInfo).toHaveProperty("rawOffsetInMinutes");
    expect(timeZoneInfo).toHaveProperty("rawOffsetInSeconds");
    expect(timeZoneInfo).toHaveProperty("timestampInUtc");
    expect(timeZoneInfo).toHaveProperty("timestampLocal");
    expect(timeZoneInfo).toHaveProperty("localDateTime");
    expect(timeZoneInfo).toHaveProperty("dayNumberOfYear");
    expect(timeZoneInfo).toHaveProperty("weekOfYear");
    expect(timeZoneInfo).toHaveProperty("utcOffsetString");
    expect(timeZoneInfo).toHaveProperty("localDateTimeString");
    expect(timeZoneInfo).toHaveProperty("utcDateTimeString");
    expect(timeZoneInfo).toHaveProperty("timeZonesByContinent");
  });

  // Returns an object with all properties set to default values when an invalid timeZoneName is provided.
  it('should return an object with all properties set to default values when an invalid timeZoneName is provided', () => {
    const timeZoneInfo = WorldTime("Invalid/TimeZone");
    expect(timeZoneInfo.rawOffsetInMinutes).toBe(0);
    expect(timeZoneInfo.rawOffsetInSeconds).toBe(0);
    expect(timeZoneInfo.timestampInUtc).toBe(0);
    expect(timeZoneInfo.timestampLocal).toBe(0);
    expect(timeZoneInfo.localDateTime).toEqual(new Date());
    expect(timeZoneInfo.dayNumberOfYear).toBe(0);
    expect(timeZoneInfo.weekOfYear).toBe(0);
    expect(timeZoneInfo.utcOffsetString).toBe("");
    expect(timeZoneInfo.localDateTimeString).toBe("");
    expect(timeZoneInfo.utcDateTimeString).toBe("");
    expect(timeZoneInfo.timeZonesByContinent).toEqual([]);
  });
});